@model BankingSoftwareSystem.Models.InboundTransferViewModel

@{
    ViewBag.Title = "InboundTransfer";
}

<style>
    @@font-face {
        font-family: "foundation-icons";
        src: url('../../fonts/foundation-icons.ttf');
    }
</style>

<div id="errorNotificationPanel" class="alert alert-danger alert-dismissible fade show text-center" role="alert">
    <span id="errorMessage"></span>
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>

<div id="successNotificationPanel" class="alert alert-success alert-dismissible fade show text-center" role="alert">
    <span id="successMessage"></span>
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>

<div class="row">
    <div class="col-xl-12 mb-30">
        <div class="card-box pd-30 height-100-p">
            <div class="progress-box text-center">
                <h4>Inbound Transfer</h4>
                <h6>An easy way to transfer to your other Accounts</h6>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="balance" value="@Model.CurrentBalance" />

<div class="row card-box">
    <div class="col-xl-6 mt-30 mb-30">
        <div class="card-box pd-30 height-100-p">
            <div class="progress-box text-center">
                <h4>Transfer From</h4>
                <h5>Account Number: @Model.AccountNumber</h5>
                <h6>£ <i id="currencyIcon" class=""></i> <span id="currentbalance">@Model.CurrentBalance</span></h6>
                <h6>@Model.AccountType</h6>
            </div>
        </div>
    </div>

    <div class="col-xl-6 mt-30 mb-30">
        <div class="card-box pd-30 height-100-p">
            <div class="progress-box text-center">
                <h4>Transfer To</h4>
                @Html.DropDownList("transferAbleToAccounts", ViewBag.TransferAbleToAccounts as SelectList, new { @class = "form-control", style = "color:black !important;", @onChange = "accountToTransferToChanged(this)" })

            </div>
        </div>
    </div>
</div>

<div id="transferPanel">
    <div class="row card-box">
        <div class="col-xl-6 mt-30 mb-30">
            <div class="card-box pd-30 height-100-p">
                <div class="progress-box text-center">
                    <h5>Narration:</h5>
                    <input class="form-control form-control-lg" placeholder="Narration" autocomplete="off" id="narration" name="narration">
                </div>
            </div>
        </div>
        <div class="col-xl-6 mb-30 mb-30 text-center">
            <div class="card-box pd-30 height-100-p">
                <div class="progress-box text-center">
                    <h5>How much do you want to transfer?</h5>
                    <input type="number" class="form-control form-control-lg" placeholder="Amount" autocomplete="off" id="amount" name="amount" min="1">
                    <button type="button" class="btn btn-primary" onclick="initiateTransfer()">Transfer</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>let icon = sessionStorage.getItem('selectedCurrencyIcon');
    document.getElementById('currencyIcon').setAttribute('class', '');
    document.getElementById('currencyIcon').classList.add('icon-copy', icon);

    let conversion = sessionStorage.getItem('from-to');
    let rate = sessionStorage.getItem(conversion);

    let currentBalance = document.getElementById('balance').value;
    document.getElementById('currentbalance').innerHTML = (Math.round(currentBalance * 1 * 100) / 100).toFixed(2);
    // used for Balance in navigation bar top right
    document.getElementById('currentbalancenav').innerHTML = (Math.round(currentBalance * 1 * 100) / 100).toFixed(2);

    document.getElementById('transferPanel').style.display = 'none';
    document.getElementById('errorNotificationPanel').style.display = 'none';
    document.getElementById('successNotificationPanel').style.display = 'none';

    function accountToTransferToChanged() {

        let transferAbleToAccounts = document.getElementById('transferAbleToAccounts');
        let selectedIndex = transferAbleToAccounts.options.selectedIndex;
        let val = transferAbleToAccounts[selectedIndex].value;

        if (val == "-1") {
            document.getElementById('transferPanel').style.display = 'none';
        }
        else {
            document.getElementById('transferPanel').style.display = 'block';
        }
    }

    function initiateTransfer() {
        let amount = document.getElementById('amount').value;
        if (amount < 1) {
            document.getElementById('errorNotificationPanel').style.display = 'block';
            document.getElementById('errorMessage').innerHTML = '* Please Specify an Amount greater than 0.';
            document.getElementById('successMessage').innerHTML = '';
            document.getElementById('successNotificationPanel').style.display = 'none';
        }
        else {
            let transferAbleToAccounts = document.getElementById('transferAbleToAccounts');
            let selectedIndex = transferAbleToAccounts.options.selectedIndex;
            let val = transferAbleToAccounts[selectedIndex].value;

            let narration = document.getElementById('narration').value;

            $.ajax({
                url: "/Inbound/TransferMoney?amount=" + amount + "&accountNumber=" + val + "&narration=" + narration,
                cache: false,
                success: function (data) {
                    if (!data.success) {
                        document.getElementById('errorMessage').innerHTML = data.message;
                        document.getElementById('errorNotificationPanel').style.display = 'block';
                        document.getElementById('successNotificationPanel').style.display = 'none';
                    }
                    else {
                        document.getElementById('errorNotificationPanel').style.display = 'none';
                        document.getElementById('successNotificationPanel').style.display = 'block';
                        let currentBalance = document.getElementById('currentbalance').innerHTML;
                        currentBalance = (Math.round((currentBalance - amount) * 100) / 100).toFixed(2);
                        document.getElementById('currentbalance').innerHTML = currentBalance;
                        document.getElementById('currentbalancenav').innerHTML = currentBalance;
                        document.getElementById('successMessage').innerHTML = data.message;
                    }
                }
            })
        }
    }</script>

@Scripts.Render("~/bundles/app")
